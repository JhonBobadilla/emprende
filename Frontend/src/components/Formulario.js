import React, { useState } from "react";

// Funci√≥n para obtener el indicativo seg√∫n el pa√≠s seleccionado
const indicativoPais = (pais) => {
    const codigosPorPais = {
        COLOMBIA: "57",
        ARGENTINA: "54",
        BRASIL: "55",
        M√âXICO: "52",
        CHILE: "56",
        PER√ö: "51",
        PANAM√Å: "507",
    };
    return codigosPorPais[pais] || "";
};

// Funci√≥n para obtener el c√≥digo de bandera correcto
const codigosBandera = {
    COLOMBIA: "co",
    ARGENTINA: "ar",
    BRASIL: "br",
    M√âXICO: "mx",
    CHILE: "cl",
    PER√ö: "pe",
    PANAM√Å: "pa",
};

const Formulario = () => {
    const [formData, setFormData] = useState({
        nombres: "",
        apellidos: "",
        pais: "",
        ciudad: "",
        sexo: "",
        edad: "",
        telefono: "",
        correo_electronico: "",
        estado_emprendimiento: "",
        rol: "",
        descripcion: "",
        tipoemprendimiento: "",
        titulo: "",
        opcion: ""
    });

    const [ciudadesDisponibles, setCiudadesDisponibles] = useState([]);
    const [errorEdad, setErrorEdad] = useState("");
    const [titulosDisponibles, setTitulosDisponibles] = useState([]);
    const [opcionesDisponibles, setOpcionesDisponibles] = useState([]);

    const ciudadesPorPais = {
        COLOMBIA: [
            "Arauca", "Armenia", "Barranquilla", "Bogot√° D.C.", "Bucaramanga",
            "Cali", "Cartagena", "C√∫cuta", "Florencia", "Ibagu√©", "In√≠rida",
            "Leticia", "Manizales", "Medell√≠n", "Mit√∫", "Mocoa", "Monter√≠a",
            "Neiva", "Pasto", "Pereira", "Popay√°n", "Puerto Carre√±o", "Quibd√≥",
            "Riohacha", "San Andr√©s", "San Jos√© del Guaviare", "Santa Marta",
            "Sincelejo", "Tunja", "Valledupar", "Villavicencio", "Yopal"
        ],
        ARGENTINA: [
            "Buenos Aires", "C√≥rdoba", "Corrientes", "Formosa", "La Rioja",
            "Mendoza", "Neuqu√©n", "Paran√°", "Posadas", "Rawson", "Resistencia",
            "R√≠o Gallegos", "Salta", "San Fernando del Valle de Catamarca",
            "San Juan", "San Luis", "San Miguel de Tucum√°n", "San Salvador de Jujuy",
            "Santa Fe", "Santa Rosa", "Santiago del Estero", "Ushuaia", "Viedma"
        ],
        BRASIL: [
            "Aracaju", "Bel√©m", "Belo Horizonte", "Boa Vista", "Bras√≠lia",
            "Campo Grande", "Cuiab√°", "Curitiba", "Florian√≥polis", "Fortaleza",
            "Goi√¢nia", "Jo√£o Pessoa", "Macap√°", "Macei√≥", "Manaus", "Natal",
            "Palmas", "Porto Alegre", "Porto Velho", "Recife", "Rio Branco",
            "Rio de Janeiro", "Salvador", "S√£o Lu√≠s", "S√£o Paulo", "Teresina",
            "Vit√≥ria"
        ],
        M√âXICO: [
            "Aguascalientes", "Campeche", "Chihuahua", "Ciudad de M√©xico", "Culiac√°n",
            "Durango", "Guadalajara", "Hermosillo", "La Paz", "Le√≥n", "M√©rida",
            "Mexicali", "Monterrey", "Morelia", "Oaxaca", "Puebla", "Quer√©taro",
            "Saltillo", "San Luis Potos√≠", "Tepic", "Tlaxcala", "Toluca",
            "Tuxtla Guti√©rrez", "Veracruz", "Villahermosa", "Zacatecas"
        ],
        CHILE: [
            "Antofagasta", "Arica", "Castro", "Copiap√≥", "Concepci√≥n", "Iquique",
            "La Serena", "Puerto Montt", "Punta Arenas", "Rancagua", "Santiago",
            "Talca", "Valdivia", "Valpara√≠so"
        ],
        PER√ö: [
            "Arequipa", "Ayacucho", "Bagua", "Callao", "Cusco", "Huancayo",
            "Huaraz", "Ica", "Iquitos", "Juliaca", "Lima", "Moyobamba",
            "Pucallpa", "Piura", "Puno", "Trujillo", "Tumbes", "Tarapoto",
            "Tacna", "Chimbote"
        ],
        PANAM√Å: [
            "Bocas del Toro", "Chiriqu√≠", "Cocl√©", "Col√≥n", "Dari√©n",
            "Herrera", "Los Santos", "Panam√°", "Veraguas"
        ]
    };

    const productos = {
        "AGRICULTURA Y OTROS": "Productos de agricultura, Otros",
        "ALIMENTOS Y BEBIDAS": "Alimentos, Bebidas",
        "ARTE": "Cualquier tipo de producto de esta categor√≠a",
        "AUTOMOTRIZ": "Cualquier tipo de producto de esta categor√≠a",
        "BIENESTAR": "Productos para eventos, Productos para celebraciones, Otros Productos de bienestar",
        "CONSTRUCCI√ìN": "Cualquier tipo de producto de esta categor√≠a",
        "DEPORTES": "Cualquier tipo de producto de esta categor√≠a",
        "ELECTR√ìNICA": "Productos de Electr√≥nica",
        "HOGAR Y DECORACI√ìN": "Productos para el hogar, Productos de decoraci√≥n",
        "INDUSTRIA": "Cualquier tipo de producto de esta categor√≠a",
        "INFANTIL": "Cualquier tipo de producto de esta categor√≠a",
        "LIBROS E IMPRESOS": "Libros, Otros",
        "LIMPIEZA": "Productos de limpieza",
        "MASCOTAS": "Comida para mascotas, Accesorios para mascotas",
        "MODA Y ACCESORIOS": "Productos textiles, Accesorios",
        "MUSICALES": "Instrumentos musicales, Accesorios",
        "OFICINA": "Cualquier tipo de producto de esta categor√≠a",
        "PAPELER√çA Y EDUCATIVOS": "Productos de Papeler√≠a, Productos Educativos",
        "PRODUCTOS PARA ADULTOS": "Cualquier tipo de producto de esta categor√≠a",
        "PRODUCTOS RELIGIOSOS": "Cualquier tipo de producto de esta categor√≠a",
        "SALUD Y BELLEZA": "Productos para la salud, Productos de belleza",
        "TECNOLOG√çA": "Software, Hardware, Otros productos de tecnolog√≠a",
        "OTROS PRODUCTOS": "Otros Productos no clasificados"
    };
    
    const servicios = {
        "ALQUILER": "Servicios de alquiler",
        "AMBIENTALES Y AGRICULTURA": "Servicios ambientales, Servicios de agricultura",
        "ARTE Y ENTRETENIMIENTO": "Servicios de arte, Servicios de entretenimiento",
        "ASESORIA Y CONSULTA": "Asesorias, Consultas",
        "EDUCACI√ìN": "Servicios educativos",
        "GASTRONOM√çA": "Servicios gastron√≥micos",
        "HOGAR (EMPRESA) Y MANTENIMIENTO": "Limpieza, Otros Servicios para el hogar y empresas, Servicios de mantenimiento en general",
        "INDUSTRIALES": "Servicios industriales",
        "INMOBILIARIOS": "Servicios inmobiliarios",
        "LOG√çSTICA Y TRANSPORTE": "Servicios de log√≠stica, Servicios de transporte",
        "MARKETING Y PUBLICIDAD": "Servicios de marketing, Servicios de publicidad",
        "MASCOTAS": "Servicios para mascotas",
        "REPARACIONES Y MANTENIMIENTO": "Servicios de reparaciones, Servicios de mantenimiento",
        "SALUD Y BIENESTAR": "Servicios para la salud, Srvicios de bienestar",
        "SEGURIDAD": "Servicios de seguridad",
        "SERVICIO PROFESIONAL": "Servicios profesionales",
        "TECNOLOG√çA Y DIGITAL": "Servicios de y para software",
        "TURISMO": "Servicios de turismo",
        "VENTAS Y COMERCIO": "Servicios de ventas, Servicios de comercio",
        "OTROS SERVICIOS": "Otros servicios no clasificados"
    };

    const handleChange = (e) => {
        const { name, value } = e.target;
    
        console.log(`üõ† Campo cambiado: ${name}, Nuevo valor: ${value}`);
    
        setFormData((prevFormData) => {
            let nuevoEstado = { ...prevFormData, [name]: value.trim() };
    
            // üîÅ Actualizaci√≥n especial por campo
            if (name === "pais") {
                nuevoEstado = { ...nuevoEstado, ciudad: "", pais: value };
                setCiudadesDisponibles(ciudadesPorPais[value] || []);
            } else if (name === "edad") {
                const edadValida = value.replace(/\D/g, "");
                nuevoEstado = { ...nuevoEstado, edad: edadValida };
                setErrorEdad(
                    edadValida && parseInt(edadValida) < 18
                        ? "Debes ser mayor de edad, si eres menor no puedes inscribirte."
                        : ""
                );
            } else if (name === "tipoemprendimiento") {
                const titulos =
                    value === "PRODUCTOS"
                        ? Object.keys(productos)
                        : value === "SERVICIOS"
                        ? Object.keys(servicios)
                        : [];
                nuevoEstado = { ...nuevoEstado, tipoemprendimiento: value, titulo: "", opcion: "" };
                setTitulosDisponibles(titulos);
                setOpcionesDisponibles([]);
            } else if (name === "titulo") {
                const source = prevFormData.tipoemprendimiento === "PRODUCTOS" ? productos : servicios;
                const opciones = source[value] ? source[value].split(",").map(op => op.trim()) : [];
                nuevoEstado = { ...nuevoEstado, titulo: value, opcion: "" };
                setOpcionesDisponibles(opciones);
            } else if (name === "correo_electronico") {
                nuevoEstado = { ...nuevoEstado, correo_electronico: value.trim() };
            } else if (name === "descripcion") {
                nuevoEstado = { ...nuevoEstado, descripcionProyecto: value.trim() };
            } else if (name === "estado_emprendimiento") {
                if (value === "A√öN NO INICIO MI EMPRENDIMIENTO") {
                    nuevoEstado = {
                        ...nuevoEstado,
                        estado_emprendimiento: value.trim(),
                        tipoemprendimiento: "",
                        titulo: "",
                        opcion: ""
                    };
                    setTitulosDisponibles([]);
                    setOpcionesDisponibles([]);
                } else {
                    nuevoEstado = { ...nuevoEstado, estado_emprendimiento: value.trim() };
                }
            }
    
            return nuevoEstado;
        });
    };
    
    
    
    const handleSubmit = async (e) => {
        e.preventDefault();
    
        const getCookie = (name) => {
            let cookieValue = null;
            if (document.cookie && document.cookie !== '') {
                const cookies = document.cookie.split(';');
                for (let i = 0; i < cookies.length; i++) {
                    const cookie = cookies[i].trim();
                    if (cookie.substring(0, name.length + 1) === (name + '=')) {
                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                        break;
                    }
                }
            }
            return cookieValue;
        };
    
        const edad = parseInt(formData.edad, 10);
    
        if (
            !formData.nombres.trim() ||
            !formData.apellidos.trim() ||
            !formData.pais.trim() || 
            !formData.ciudad.trim() || 
            !formData.sexo.trim() || 
            !formData.edad.trim() ||
            isNaN(edad) ||
            edad < 18 ||
            !formData.correo_electronico.trim() || 
            !formData.estado_emprendimiento.trim() || 
            !formData.rol.trim() ||
            !formData.descripcionProyecto.trim()
        ) {
            alert("Todos los campos son obligatorios y debes ser mayor de 18 a√±os.");
            return;
        }
    
        if (formData.estado_emprendimiento !== "A√öN NO INICIO MI EMPRENDIMIENTO" && (
            !formData.tipoemprendimiento.trim() ||
            !formData.titulo.trim() ||
            !formData.opcion.trim()
        )) {
            alert("Completa la informaci√≥n del negocio.");
            return;
        }
    
        const telefonoCompleto = `+${indicativoPais(formData.pais)}${formData.telefono.replace(/\D/g, "")}`;
        const datosAEnviar = {
            ...formData,
            telefono: telefonoCompleto,
            tipoemprendimiento: formData.tipoemprendimiento.trim()
        };
    
        try {
            const response = await fetch("http://127.0.0.1:8000/api/usuarios/", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "X-CSRFToken": getCookie("csrftoken"),
                },
                credentials: "include",
                body: JSON.stringify(datosAEnviar)
            });
    
            const responseData = await response.text();
    
            try {
                const jsonData = JSON.parse(responseData);
                if (!response.ok) {
                    throw new Error(jsonData.message || "Error en el servidor");
                }
                alert("‚úÖ Tu formulario fue enviado exitosamente.");

            } catch (e) {
                console.error("El servidor devolvi√≥:", responseData);
                throw new Error("La respuesta no es JSON v√°lido: " + responseData.substring(0, 100));
            }
        } catch (error) {
            console.error("Error completo:", error);
            alert("Error: " + error.message);
        }
    };
    
    
    
    
    return (
        <form onSubmit={handleSubmit}>
            <label>Pa√≠s:</label>
            <select name="pais" value={formData.pais} onChange={handleChange} required>
                <option value="">Selecciona un pa√≠s</option>
                {Object.keys(ciudadesPorPais).map((pais) => (
                    <option key={pais} value={pais}>{pais}</option>
                ))}
            </select>

            <label>Ciudad:</label>
            <select name="ciudad" value={formData.ciudad} onChange={handleChange} required>
                <option value="">Selecciona una ciudad</option>
                {ciudadesDisponibles.map((ciudad, idx) => (
                    <option key={idx} value={ciudad}>{ciudad}</option>
                ))}
            </select>

            <label>Nombres:</label>
            <input type="text" name="nombres" value={formData.nombres} onChange={handleChange} required />

            <label>Apellidos:</label>
            <input type="text" name="apellidos" value={formData.apellidos} onChange={handleChange} required />

            <label>Sexo:</label>
            <select name="sexo" value={formData.sexo} onChange={handleChange} required>
                <option value="">Selecciona una opci√≥n</option>
                <option value="FEMENINO">FEMENINO</option>
                <option value="MASCULINO">MASCULINO</option>
                <option value="OTRO">OTRO</option>
            </select>

            <label>Edad:</label>
            <input type="text" name="edad" value={formData.edad} onChange={handleChange} required />
            {errorEdad && <p style={{ color: "red" }}>{errorEdad}</p>}

            <div className="mb-4">
                <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="telefono">
                    Tel√©fono
                </label>
                <div style={{ display: "flex", alignItems: "center", border: "1px solid black", borderRadius: "3px", width: "40%" }}>
                    <span style={{ marginRight: "8px", display: "flex", alignItems: "center" }}>
                        {formData.pais && `+${indicativoPais(formData.pais)}`}
                        {codigosBandera[formData.pais] && (
                            <img
                                src={`https://flagcdn.com/w40/${codigosBandera[formData.pais]}.png`}
                                alt={`${formData.pais} flag`}
                                style={{ width: "20px", height: "15px", marginLeft: "5px" }}
                            />
                        )}
                    </span>
                    <input
                        type="text"
                        name="telefono"
                        value={formData.telefono}
                        onChange={handleChange}
                        required
                        placeholder="N√∫mero de tel√©fono"
                        style={{ border: "none", outline: "none", flex: "1", paddingLeft: "10px" }}
                    />
                </div>
            </div>

            <div className="mb-4">
                <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="correo_electronico">
                    Correo electr√≥nico
                </label>
                <input
                    type="email"
                    id="correo_electronico"
                    name="correo_electronico"
                    value={formData.correo_electronico}
                    onChange={handleChange}
                    placeholder="ejemplo@correo.com"
                    required
                    className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                />
            </div>
            
            <label>Estado del emprendimiento:</label>
            <select name="estado_emprendimiento" value={formData.estado_emprendimiento} onChange={handleChange} required>
                <option value="">Selecciona una opci√≥n</option>
                <option value="A√öN NO INICIO MI EMPRENDIMIENTO">A√öN NO INICIO MI EMPRENDIMIENTO</option>
                <option value="YA INICI√â MI EMPRENDIMIENTO PERO A√öN NO GENERO UTILIDADES">YA INICI√â PERO A√öN NO GENERO UTILIDADES</option>
                <option value="YA INICI√â MI EMPRENDIMIENTO Y YA GENERO UTILIDADES">YA INICI√â Y YA GENERO UTILIDADES</option>
            </select>

            {/* Mostrar casillas condicionalmente */}
            {formData.estado_emprendimiento && formData.estado_emprendimiento !== "A√öN NO INICIO MI EMPRENDIMIENTO" && (
                <>
                    <label>Mi emprendimiento se centra en:</label>
                    <select name="tipoemprendimiento" value={formData.tipoemprendimiento} onChange={handleChange} required>
                        <option value="">Selecciona una opci√≥n</option>
                        <option value="PRODUCTOS">PRODUCTOS</option>
                        <option value="SERVICIOS">SERVICIOS</option>
                    </select>

                    <label>Categor√≠a:</label>
                    <select name="titulo" value={formData.titulo} onChange={handleChange} required>
                        {formData.tipoemprendimiento === ""
                            ? <option value="">Debes escoger primero una opci√≥n de la casilla anterior</option>
                            : <>
                                <option value="">Selecciona un t√≠tulo</option>
                                {titulosDisponibles.map((titulo, idx) => (
                                    <option key={idx} value={titulo}>{titulo}</option>
                                ))}
                            </>
                        }
                    </select>

                    <label>Opci√≥n espec√≠fica:</label>
                    <select name="opcion" value={formData.opcion} onChange={handleChange} required>
                        {formData.titulo === ""
                            ? <option value="">Debes escoger primero una opci√≥n de la casilla anterior</option>
                            : <>
                                <option value="">Selecciona una opci√≥n</option>
                                {opcionesDisponibles.map((opcion, idx) => (
                                    <option key={idx} value={opcion}>{opcion}</option>
                                ))}
                            </>
                        }
                    </select>
                </>
            )}

            <div className="mb-4">
                <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="rol">
                    Tu rol en el emprendimiento
                </label>
                <select
                    id="rol"
                    name="rol"
                    value={formData.rol}
                    onChange={handleChange}
                    required
                    className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                >
                    <option value="">Selecciona una opci√≥n</option>
                    <option value="SOCIO CAPITALISTA">SOY O SER√â SOCIO CAPITALISTA</option>
                    <option value="SOCIO TRABAJADOR">SOY O SER√â SOCIO TRABAJADOR</option>
                    <option value="SOCIO IGUALITARIO (CAPITAL Y TRABAJO)">SOY O SER√â SOCIO IGUALITARIO (CAPITAL Y TRABAJO)</option>
                </select>
            </div>

            <label>Descripci√≥n del proyecto que tienes o quieres:</label>
            <textarea
                id="descripcion"
                name="descripcion"
                placeholder="Describe brevemente el proyecto que tienes o quisieras unirte (m√°ximo 800 caracteres)"
                maxLength={800}
                value={formData.descripcion}
                onChange={handleChange}
                required
                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                style={{ resize: "none", height: "100px", width: "80%" }}
            />

            <button type="submit">Enviar</button>
        </form>
    );
};

export default Formulario;
























